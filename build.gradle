plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version "0.18.2"
    id 'org.hidetake.swagger.generator' version "2.18.2"
    id 'org.flywaydb.flyway' version '7.10.0'
}

subprojects {
    group = 'music.api.server'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'org.flywaydb.flyway'

    repositories {
        mavenCentral()
    }

    flyway {
        url = 'jdbc:sqlserver://localhost:1433;databaseName=MUSIC_SITE;encrypt=true;trustServerCertificate=true;'
        user = 'SA'
        password = 'testtest123!'
        locations = ["filesystem:${project(':common').projectDir}/src/test/resources/sql"]
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    def querydslDir = "$buildDir/generated/querydsl"

    task cleanDatabase(type: org.flywaydb.gradle.task.FlywayCleanTask)

    task migrateDatabase {
        dependsOn cleanDatabase
        dependsOn flywayMigrate
    }

    test {
        useJUnitPlatform()
    }

    sourceSets {
        main.java.srcDirs += [querydslDir]
    }

    compileJava {
        options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
    }

    clean.doLast {
        file(querydslDir).deleteDir()
    }

    dependencies {
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        implementation 'io.github.goyounha11:automatedAPIDocsUtil:1.0.7'
        implementation 'p6spy:p6spy:3.9.1'
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:11.2.2.jre11'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(":common") {
    apply {
        plugin("java-test-fixtures")
    }

    bootJar {
        enabled = false
    }
}

project(":api") {

    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'org.hidetake.swagger.generator'
    apply plugin: 'com.epages.restdocs-api-spec'

    dependencies {
        implementation(project(":common"))
        implementation(project(":integration"))
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

        testImplementation(testFixtures(project(":common")))
        testImplementation 'io.findify:s3mock_2.13:0.2.6'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
        testImplementation("com.epages:restdocs-api-spec-mockmvc:0.18.2")
        swaggerCodegen("io.swagger.codegen.v3:swagger-codegen-cli:3.0.44")
        swaggerUI("org.webjars:swagger-ui:3.52.1")
    }

    jar {
        enabled = false
    }

    bootJar {
        enabled = true
    }

    asciidoctor {

    }

    openapi3 {
        server = "http://localhost:8080"
        title = "Music Site API 문서"
        description = "Spring REST Docs with SwaggerUI."
        version = "0.0.1"
        outputFileNamePrefix = "open-api-3.0.1"
        format = "json"
    }

    swaggerSources {
        create("convert") {
            setInputFile(file("$buildDir/api-spec/open-api-3.0.1.json"))
            code.language = "html"
        }
    }
}

project(":admin") {
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'org.hidetake.swagger.generator'
    apply plugin: 'com.epages.restdocs-api-spec'

    dependencies {
        implementation(project(":common"))
        implementation(project(":integration"))
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

        testImplementation(testFixtures(project(":common")))
        testImplementation 'io.findify:s3mock_2.13:0.2.6'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
        testImplementation("com.epages:restdocs-api-spec-mockmvc:0.18.2")
        swaggerCodegen("io.swagger.codegen.v3:swagger-codegen-cli:3.0.44")
        swaggerUI("org.webjars:swagger-ui:3.52.1")
    }

    jar {
        enabled = false
    }

    bootJar {
        enabled = true
    }

    asciidoctor {

    }

    openapi3 {
        server = "http://localhost:8080"
        title = "Music Site Admin API 문서"
        description = "Spring REST Docs with SwaggerUI."
        version = "0.0.1"
        outputFileNamePrefix = "open-api-3.0.1"
        format = "json"
    }

    swaggerSources {
        create("convert") {
            setInputFile(file("$buildDir/api-spec/open-api-3.0.1.json"))
            code.language = "html"
        }
    }
}

project(":integration") {
    dependencies {
        implementation(project(":common"))
        implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    }

    bootJar {
        enabled = false
    }
}